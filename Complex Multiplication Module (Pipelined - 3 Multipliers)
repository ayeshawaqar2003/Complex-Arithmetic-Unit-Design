module complex_multiplier (
    input clk,
    input rst,
    input valid_in,
    input signed [15:0] a, b, c, d,
    output reg signed [31:0] y, z,
    output reg valid_out
);
    // Pipeline registers
    reg signed [15:0] a_reg, b_reg, c_reg, d_reg;
    reg signed [31:0] ac, bd, ad, bc;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            y <= 0;
            z <= 0;
            valid_out <= 0;
        end else if (valid_in) begin
            // Stage 1: Register inputs
            a_reg <= a;
            b_reg <= b;
            c_reg <= c;
            d_reg <= d;

            // Stage 2: Compute partial products
            ac <= a * c;
            bd <= b * d;
            ad <= a * d;
            bc <= b * c;

            // Stage 3: Compute final results
            y <= ac - bd;  // Real part: y = ac - bd
            z <= ad + bc;  // Imaginary part: z = ad + bc

            valid_out <= 1;
        end else begin
            valid_out <= 0;
        end
    end
endmodule
